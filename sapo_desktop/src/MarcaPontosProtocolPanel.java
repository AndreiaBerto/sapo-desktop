import java.awt.event.ActionEvent;

import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;


/*
 * MarcaPontosProtocolPanel.java
 *
 * Created on 17 de Setembro de 2005, 16:13
 */

/**
 *
 * @author  Anderson Zanardi de Freitas
 */
public class MarcaPontosProtocolPanel extends javax.swing.JPanel {
    /**
	 * 
	 */
    private static final long serialVersionUID = -1028685403405289497L;

    SAPO sapo;
    Protocolo proto = new Protocolo(); //contem o indice dos pontos que compoem o protocolo
    
    String frenteLabel[] = proto.frenteLabel;
    javax.swing.JRadioButton frente[] = new javax.swing.JRadioButton[frenteLabel.length];
    javax.swing.JCheckBox frenteCk[] = new javax.swing.JCheckBox[frenteLabel.length];
    
    String latEsqLabel[] = proto.latEsqLabel;
    javax.swing.JRadioButton latEsq[] = new javax.swing.JRadioButton[latEsqLabel.length];                        
    javax.swing.JCheckBox latEsqCk[] = new javax.swing.JCheckBox[latEsqLabel.length];    
    
    String latDirLabel[] = proto.latDirLabel;
    javax.swing.JRadioButton latDir[] = new javax.swing.JRadioButton[latDirLabel.length];
    javax.swing.JCheckBox latDirCk[] = new javax.swing.JCheckBox[latDirLabel.length];
    
    String posteriorLabel[] = proto.posteriorLabel;
    javax.swing.JRadioButton posterior[] = new javax.swing.JRadioButton[posteriorLabel.length];
    javax.swing.JCheckBox posteriorCk[] = new javax.swing.JCheckBox[posteriorLabel.length];
    
    int frenteProtocol = 0;
    int latDirProtocol = 0;
    int latEsqProtocol = 0;
    int posteriorProtocol = 0;
    int index; //para deletar os pontos
    
    
    /** Creates new form MarcaPontosProtocolPanel */
    public MarcaPontosProtocolPanel(SAPO sapo) {
        this.sapo = sapo;
        initComponents();
        proto = sapo.getProtocol("Sapo"); //protocolo padrão SAPO
    }
    
    public void mostraVista(String vista) {
    	int numPontos = sapo.paciente.dados.imgData[sapo.numImg].getPontos().size();
    	int protoPontos = 0;
    	JRadioButton radio[] = null;
    	JCheckBox check[] = null;
    	
    	if (vista.equalsIgnoreCase("Anterior")) {
    		jRdBtnFrontal.doClick();
    		frenteProtocol = conferePontos(numPontos, proto.frente.size(), frente, frenteCk);
    	}
    	else if (vista.equalsIgnoreCase("Lateral Esquerda")) {
    		jRdBtnLatEsq.doClick();
    		latEsqProtocol = conferePontos(numPontos, proto.latEsq.size(), latEsq, latEsqCk);
    	}
    	else if (vista.equalsIgnoreCase("Lateral Direita")) {
    		jRdBtnLatDir.doClick();
    		latDirProtocol = conferePontos(numPontos, proto.latDir.size(), latDir, latDirCk);
    	}
    	else if (vista.equalsIgnoreCase("Posterior")) {
    		jRdBtnPosterior.doClick();
    		posteriorProtocol = conferePontos(numPontos, proto.poster.size(), posterior, posteriorCk);
    	}
    	else {
    		JOptionPane.showMessageDialog(sapo,"Esta imagem não tem uma vista definida.\nNão pode ser utilizada para marcação por nenhum protocolo.");
    	}
    	
    }
    
    private int conferePontos(int numPontos, int protoPontos, JRadioButton radio[], JCheckBox check[]) {
    	if (numPontos >= protoPontos) {
    		for (int i=0; i < radio.length; i++) 
    			if (radio[i] != null) {
    				radio[i].setSelected(true);
    				radio[i].setBorderPainted(false);
    			}
    		for (int i=0; i < check.length; i++) 
    			if (check[i] != null) 
    				check[i].setSelected(true);
    		sapo.marcaPontosProtocol.desacoplarMantendo(sapo.numImg);
    		return protoPontos;
    	}
    	else {
    		reiniciar(false);
    		return 0;
    	}
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        btnGroupPontos = new javax.swing.ButtonGroup();
        jpopupMenuProtocol = new javax.swing.JPopupMenu();
        jmItemReiniciar = new javax.swing.JMenuItem();
        jmItemPular = new javax.swing.JMenuItem();
        jmItemApagar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jmItemSair = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jmenuItemOtimo = new javax.swing.JMenuItem();
        jmenuItem80 = new javax.swing.JMenuItem();
        jmenuItem100 = new javax.swing.JMenuItem();
        jmenuItem150 = new javax.swing.JMenuItem();
        jmtemZoom200 = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        jbtnOk = new javax.swing.JButton();
        jbtnReiniciar = new javax.swing.JButton();
        jbtnCancel = new javax.swing.JButton();
        jbMedeDistAjuda = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jcmbProtocol = new javax.swing.JComboBox();
        jRdBtnFrontal = new javax.swing.JRadioButton();
        jRdBtnLatEsq = new javax.swing.JRadioButton();
        jRdBtnLatDir = new javax.swing.JRadioButton();
        jRdBtnPosterior = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane2.getVerticalScrollBar().setUnitIncrement(25);
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane1.getVerticalScrollBar().setUnitIncrement(25);
        jPanel6 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();

        jmItemReiniciar.setText("Reiniciar marca\u00e7\u00e3o");
        jmItemReiniciar.setToolTipText("Apaga todos os pontos e reinicia a marca\u00e7\u00e3o");
        jmItemReiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmItemReiniciarActionPerformed(evt);
            }
        });

        jpopupMenuProtocol.add(jmItemReiniciar);

        jmItemPular.setText("Pular esse ponto");
        jmItemPular.setToolTipText("Passa para o pr\u00f3ximo ponto");
        jmItemPular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmItemPularActionPerformed(evt);
            }
        });

        jpopupMenuProtocol.add(jmItemPular);

        jmItemApagar.setText("Apagar ponto");
        jmItemApagar.setToolTipText("Apaga este ponto");
        jmItemApagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmItemApagarActionPerformed(evt);
            }
        });

        jpopupMenuProtocol.add(jmItemApagar);

        jpopupMenuProtocol.add(jSeparator1);

        jmItemSair.setText("Sair");
        jmItemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmItemSairActionPerformed(evt);
            }
        });

        jpopupMenuProtocol.add(jmItemSair);

        jMenu1.setText("Zoom");
        jMenu1.setToolTipText("Aplica zoom");
        jmenuItemOtimo.setText("Ajusta");
        jmenuItemOtimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmenuItemOtimoActionPerformed(evt);
            }
        });

        jMenu1.add(jmenuItemOtimo);

        jmenuItem80.setText("80%");
        jmenuItem80.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmenuItem80ActionPerformed(evt);
            }
        });

        jMenu1.add(jmenuItem80);

        jmenuItem100.setText("100%");
        jmenuItem100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmenuItem100ActionPerformed(evt);
            }
        });

        jMenu1.add(jmenuItem100);

        jmenuItem150.setText("150%");
        jmenuItem150.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmenuItem150ActionPerformed(evt);
            }
        });

        jMenu1.add(jmenuItem150);

        jmtemZoom200.setText("200%");
        jmtemZoom200.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmtemZoom200ActionPerformed(evt);
            }
        });

        jMenu1.add(jmtemZoom200);

        jpopupMenuProtocol.add(jMenu1);

        setLayout(new java.awt.BorderLayout());

        setMaximumSize(new java.awt.Dimension(400, 414));
        setMinimumSize(new java.awt.Dimension(200, 414));
        jbtnOk.setText("Ok");
        jbtnOk.setMaximumSize(null);
        jbtnOk.setMinimumSize(new java.awt.Dimension(75, 23));
        jbtnOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jbtnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnOkActionPerformed(evt);
            }
        });

        jPanel2.add(jbtnOk);

        jbtnReiniciar.setText("Reiniciar");
        jbtnReiniciar.setToolTipText("Apaga todos os pontos e reinicia a marca\u00e7\u00e3o");
        jbtnReiniciar.setEnabled(false);
        jbtnReiniciar.setMaximumSize(null);
        jbtnReiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnReiniciarActionPerformed(evt);
            }
        });

        jPanel2.add(jbtnReiniciar);

        jbtnCancel.setText("Cancel");
        jbtnCancel.setMaximumSize(null);
        jbtnCancel.setMinimumSize(new java.awt.Dimension(75, 23));
        jbtnCancel.setPreferredSize(new java.awt.Dimension(75, 23));
        jbtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCancelActionPerformed(evt);
            }
        });

        jPanel2.add(jbtnCancel);

        jbMedeDistAjuda.setText("Ajuda");
        jbMedeDistAjuda.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbMedeDistAjuda.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbMedeDistAjuda.setMaximumSize(null);
        jbMedeDistAjuda.setMinimumSize(new java.awt.Dimension(75, 23));
        jbMedeDistAjuda.setPreferredSize(new java.awt.Dimension(75, 23));
        jbMedeDistAjuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMedeDistAjudaActionPerformed(evt);
            }
        });

        jPanel2.add(jbMedeDistAjuda);

        add(jPanel2, java.awt.BorderLayout.SOUTH);

        jPanel5.setMinimumSize(new java.awt.Dimension(200, 33));
        jLabel1.setText("Nome:");
        jPanel5.add(jLabel1);

        jcmbProtocol.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sapo", "User1", "User2", "User3" }));
        jcmbProtocol.setToolTipText("Escolha do protocolo a seguir");
        jcmbProtocol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcmbProtocolActionPerformed(evt);
            }
        });

        jPanel5.add(jcmbProtocol);

        btnGroupPontos.add(jRdBtnFrontal);
        jRdBtnFrontal.setText("Frontal");
        jRdBtnFrontal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRdBtnFrontalActionPerformed(evt);
            }
        });

        jPanel5.add(jRdBtnFrontal);

        btnGroupPontos.add(jRdBtnLatEsq);
        jRdBtnLatEsq.setText("Esquerda");
        jRdBtnLatEsq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRdBtnLatEsqActionPerformed(evt);
            }
        });

        jPanel5.add(jRdBtnLatEsq);

        btnGroupPontos.add(jRdBtnLatDir);
        jRdBtnLatDir.setText("Direita");
        jRdBtnLatDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRdBtnLatDirActionPerformed(evt);
            }
        });

        jPanel5.add(jRdBtnLatDir);

        btnGroupPontos.add(jRdBtnPosterior);
        jRdBtnPosterior.setText("Posterior");
        jRdBtnPosterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRdBtnPosteriorActionPerformed(evt);
            }
        });

        jPanel5.add(jRdBtnPosterior);

        add(jPanel5, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(4, 80));
        jPanel3.setLayout(new java.awt.GridLayout(50, 1));

        jPanel3.setMaximumSize(null);
        jScrollPane2.setViewportView(jPanel3);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.NORTH);

        jScrollPane1.setAutoscrolls(true);
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel4.setAlignmentX(0.0F);
        jPanel4.setAlignmentY(0.0F);
        jPanel4.setFocusable(false);
        jPanel6.add(jPanel4, new java.awt.GridBagConstraints());

        jScrollPane1.setViewportView(jPanel6);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents

    private void jbMedeDistAjudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMedeDistAjudaActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jbMedeDistAjudaActionPerformed

    private void jmenuItemOtimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenuItemOtimoActionPerformed
        sapo.restauraZoom();
        sapo.mostraZoom(sapo.jpMarcaPontosProtocol, "MarcaPontosProtocol");
    }//GEN-LAST:event_jmenuItemOtimoActionPerformed

    private void jmenuItem150ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenuItem150ActionPerformed
        sapo.jif[sapo.numImg].zoom = 150;
        if (sapo.jif[sapo.numImg].flagImg)
            sapo.showInternalFrameWithImage(sapo.numImg);
        sapo.mostraZoom(sapo.jpMarcaPontosProtocol, "MarcaPontosProtocol");
    }//GEN-LAST:event_jmenuItem150ActionPerformed

    private void jmenuItem100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenuItem100ActionPerformed
        sapo.jif[sapo.numImg].zoom = 100;
        if (sapo.jif[sapo.numImg].flagImg)
            sapo.showInternalFrameWithImage(sapo.numImg);
        sapo.mostraZoom(sapo.jpMarcaPontosProtocol, "MarcaPontosProtocol");
    }//GEN-LAST:event_jmenuItem100ActionPerformed

    private void jmenuItem80ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenuItem80ActionPerformed
        sapo.jif[sapo.numImg].zoom = 80;
        if (sapo.jif[sapo.numImg].flagImg)
            sapo.showInternalFrameWithImage(sapo.numImg);
        sapo.mostraZoom(sapo.jpMarcaPontosProtocol, "MarcaPontosProtocol");
    }//GEN-LAST:event_jmenuItem80ActionPerformed

    private void jmtemZoom200ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmtemZoom200ActionPerformed
        sapo.jif[sapo.numImg].zoom = 200;
        if (sapo.jif[sapo.numImg].flagImg)
            sapo.showInternalFrameWithImage(sapo.numImg);
        sapo.mostraZoom(sapo.jpMarcaPontosProtocol, "MarcaPontosProtocol");
    }//GEN-LAST:event_jmtemZoom200ActionPerformed

    private void jcmbProtocolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcmbProtocolActionPerformed
        jPanel3.removeAll();
        jPanel4.removeAll();
        jRdBtnFrontal.setSelected(false);
        jRdBtnLatEsq.setSelected(false);
        jRdBtnLatDir.setSelected(false);
        jRdBtnPosterior.setSelected(false);
        this.updateUI();
        int index = jcmbProtocol.getSelectedIndex();
        switch(index){
            case 0: proto = sapo.getProtocol("Sapo");break;
            case 1: proto = sapo.getProtocol("User1");break;
            case 2: proto = sapo.getProtocol("User2");break;
            case 3: proto = sapo.getProtocol("User3");break;
        }
        jRdBtnFrontal.doClick();
    }//GEN-LAST:event_jcmbProtocolActionPerformed

    private void jmItemReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmItemReiniciarActionPerformed
        reiniciar(true);
    }//GEN-LAST:event_jmItemReiniciarActionPerformed
    
    /**Reinicia o protocolo*/
    private void jbtnReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnReiniciarActionPerformed
    	reiniciar(true);
    }//GEN-LAST:event_jbtnReiniciarActionPerformed

    private void reiniciar(boolean aviso) {
    	int pto = 0;
        if(jRdBtnFrontal.isSelected()){
            if(proto.frente.size()!=0){
            	sapo.marcaPontosProtocol.reacoplar(sapo.numImg);
                sapo.jpMarca.apagaAllPontosProtocol(frenteLabel,aviso);
                for(int i=0; i<proto.frente.size(); i++){
                    pto = ((Integer)proto.frente.get(i)).intValue();
                    frente[pto].setSelected(false);
                    frente[pto].setEnabled(false);
                    frente[pto].setBorderPainted(false);
                    frenteCk[pto].setEnabled(true);
                    frenteCk[pto].setSelected(false);
                }
                frenteProtocol = 0;
                pto = ((Integer)proto.frente.get(frenteProtocol)).intValue();
                frente[pto].setEnabled(true);
                frente[pto].setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.red,1), javax.swing.BorderFactory.createLineBorder(java.awt.Color.yellow,2)));
                frente[pto].setBorderPainted(true);
            }
            else
                JOptionPane.showMessageDialog(sapo,"Protocolo não definido. Selecione um protocolo válido!");
        }
        
        if(jRdBtnLatEsq.isSelected()){
            if(proto.latEsq.size()!=0){
            	sapo.marcaPontosProtocol.reacoplar(sapo.numImg);
            	sapo.jpMarca.apagaAllPontosProtocol(latEsqLabel,aviso);
                for(int i=0; i<proto.latEsq.size(); i++){
                    pto = ((Integer)proto.latEsq.get(i)).intValue();
                    latEsq[pto].setSelected(false);
                    latEsq[pto].setEnabled(false);
                    latEsq[pto].setBorderPainted(false);
                    latEsqCk[pto].setEnabled(true);
                    latEsqCk[pto].setSelected(false);
                }
                latEsqProtocol = 0;
                pto = ((Integer)proto.latEsq.get(latEsqProtocol)).intValue();
                latEsq[pto].setEnabled(true);
                latEsq[pto].setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.red,1), javax.swing.BorderFactory.createLineBorder(java.awt.Color.yellow,2)));
                latEsq[pto].setBorderPainted(true);
            }
            else
                JOptionPane.showMessageDialog(sapo,"Protocolo não definido. Selecione um protocolo válido!");
        }
        if(jRdBtnLatDir.isSelected()){
            if(proto.latDir.size()!=0){
            	sapo.marcaPontosProtocol.reacoplar(sapo.numImg);
            	sapo.jpMarca.apagaAllPontosProtocol(latDirLabel,aviso);
                for(int i=0; i<proto.latDir.size(); i++){
                    pto = ((Integer)proto.latDir.get(i)).intValue();
                    latDir[pto].setSelected(false);
                    latDir[pto].setEnabled(false);
                    latDir[pto].setBorderPainted(false);
                    latDirCk[pto].setEnabled(true);
                    latDirCk[pto].setSelected(false);
                }
                latDirProtocol = 0;
                pto = ((Integer)proto.latDir.get(latDirProtocol)).intValue();
                latDir[pto].setEnabled(true);
                latDir[pto].setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.red,1), javax.swing.BorderFactory.createLineBorder(java.awt.Color.yellow,2)));
                latDir[pto].setBorderPainted(true);
            }
            else
                JOptionPane.showMessageDialog(sapo,"Protocolo não definido. Selecione um protocolo válido!");
        }
        if(jRdBtnPosterior.isSelected()){
            if(proto.poster.size()!=0){
            	sapo.marcaPontosProtocol.reacoplar(sapo.numImg);
            	sapo.jpMarca.apagaAllPontosProtocol(posteriorLabel,aviso);
                for(int i=0; i<proto.poster.size(); i++){
                    pto = ((Integer)proto.poster.get(i)).intValue();
                    posterior[pto].setSelected(false);
                    posterior[pto].setEnabled(false);
                    posterior[pto].setBorderPainted(false);
                    posteriorCk[pto].setEnabled(true);
                    posteriorCk[pto].setSelected(false);
                }
                posteriorProtocol = 0;
                pto = ((Integer)proto.poster.get(posteriorProtocol)).intValue();
                posterior[pto].setEnabled(true);
                posterior[pto].setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.red,1), javax.swing.BorderFactory.createLineBorder(java.awt.Color.yellow,2)));
                posterior[pto].setBorderPainted(true);
            }
            else
                JOptionPane.showMessageDialog(sapo,"Protocolo não definido. Selecione um protocolo válido!");
        }
	}

	private void jmItemSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmItemSairActionPerformed
        jpopupMenuProtocol.setVisible(false);
    }//GEN-LAST:event_jmItemSairActionPerformed

    private void jmItemApagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmItemApagarActionPerformed
        int pto = 0;
        String pontoLabel = "";
        javax.swing.JCheckBox ck = new javax.swing.JCheckBox();
        javax.swing.JRadioButton rb = new javax.swing.JRadioButton();
        index = sapo.marcaPontosProtocol.index;
        if(index!=-1){
            sapo.jpMarca.selectRow(index);
            pontoLabel = sapo.jpMarca.getLabel(index);
            sapo.jpMarca.apaga();
       
            if(jRdBtnFrontal.isSelected()){
                for(int i=0; i<proto.frente.size(); i++){
                    pto = ((Integer)proto.frente.get(i)).intValue();
                    if(pontoLabel.equals(frenteCk[pto].getText())){
                        ck = frenteCk[pto];
                        rb = frente[pto];
                    }
                }
            }
            if(jRdBtnLatEsq.isSelected()){
                for(int i=0; i<proto.latEsq.size(); i++){
                    pto = ((Integer)proto.latEsq.get(i)).intValue();
                    if(pontoLabel.equals(latEsqCk[pto].getText())){ 
                    	ck = latEsqCk[pto];
                    	rb = latEsq[pto];
                    }
                }
            }
            if(jRdBtnLatDir.isSelected()){
                for(int i=0; i<proto.latDir.size(); i++){
                    pto = ((Integer)proto.latDir.get(i)).intValue();
                    if(pontoLabel.equals(latDirCk[pto].getText())){ 
                    	ck = latDirCk[pto];
                    	rb = latDir[pto];
                    }
                }
            }
            if(jRdBtnPosterior.isSelected()){
                for(int i=0; i<proto.poster.size(); i++){
                    pto = ((Integer)proto.poster.get(i)).intValue();
                    if(pontoLabel.equals(posteriorCk[pto].getText())){ 
                    	ck = posteriorCk[pto];
                    	rb = posterior[pto];
                    }
                }
            }
            
            ck.requestFocus();
            rb.requestFocus();
            
            ck.setSelected(false);
            rb.setSelected(false);
            
            ck.setEnabled(false);
            rb.setEnabled(false);
        }
    }//GEN-LAST:event_jmItemApagarActionPerformed
    
    public void setIndex(int i){
        index = i;
    }
    
    private void jmItemPularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmItemPularActionPerformed
        jpopupMenuProtocol.setVisible(false); 
        segueProtocol(false);
    }//GEN-LAST:event_jmItemPularActionPerformed

    private void jbtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCancelActionPerformed
    	sapo.restauraZoom();
    	sapo.restauraInternalFrameOriginal();
        sapo.marcaPontosProtocol.desacoplar(sapo.numImg);
    }//GEN-LAST:event_jbtnCancelActionPerformed

    private void jbtnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnOkActionPerformed
        sapo.restauraZoom();
        sapo.jpMarca.aplica();
        sapo.marcaPontosProtocol.desacoplar(sapo.numImg);
        sapo.restauraInternalFrameOriginal();
        if (sapo.paciente.dados.imgData[sapo.numImg].getPontos().size() == 0) sapo.jif[sapo.numImg].flagPontos = false;
        sapo.paciente.escreveDB();
        sapo.paciente.salvarAlteracoes = false;
        jbtnReiniciar.setEnabled(true);
        jmItemReiniciar.setEnabled(true);
    }//GEN-LAST:event_jbtnOkActionPerformed

    private void jRdBtnPosteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRdBtnPosteriorActionPerformed
    	if (sapo.paciente.dados.imgData[sapo.numImg].vista.equalsIgnoreCase("Posterior")) {
    		if(proto.poster.size()!=0){
    			int pto = 0;
    			jPanel4.removeAll();
    			int posX[] = proto.posX;
    			int posY[] = proto.posY;
    			for(int i=0; i<proto.poster.size(); i++){
    				pto = ((Integer)proto.poster.get(i)).intValue();
    				posterior[pto] = new javax.swing.JRadioButton();
    				jPanel4.add(posterior[pto]);
    				posterior[pto].setBounds(posX[pto], posY[pto], 20, 20);
    				posterior[pto].setContentAreaFilled(false);
    				posterior[pto].setEnabled(false);
    				posterior[pto].addFocusListener(new DeslocaParaVerComponente());
    				posterior[pto].addActionListener(new naoMuda());
    				jPanel4.setComponentZOrder(posterior[pto],0);
    			}
    			javax.swing.JLabel jLabel1 = new javax.swing.JLabel(); 
    			jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/costas.png")));
    			jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
    			jLabel1.setMaximumSize(new java.awt.Dimension(288, 650));
    			jLabel1.setMinimumSize(new java.awt.Dimension(288, 650));
    			jLabel1.setPreferredSize(new java.awt.Dimension(288, 650));
    			jPanel4.add(jLabel1);
    			jLabel1.setBounds(0, 0, 288, 650);
    			jPanel3.removeAll();
    			
    			for(int i=0; i<proto.poster.size(); i++){
    				pto = ((Integer)proto.poster.get(i)).intValue();
    				posteriorCk[pto] = new javax.swing.JCheckBox(posteriorLabel[pto]);
    				jPanel3.add(posteriorCk[pto]);
    				posteriorCk[pto].addFocusListener(new DeslocaParaVerComponente());
    				posteriorCk[pto].addActionListener(new naoMuda());
    			}
    			posteriorProtocol = 0;
    			pto = ((Integer)proto.poster.get(posteriorProtocol)).intValue();
    			posterior[pto].setEnabled(true);
    			posterior[pto].setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.red,1), javax.swing.BorderFactory.createLineBorder(java.awt.Color.yellow,2)));
    			posterior[pto].setBorderPainted(true);
    			jbtnReiniciar.setEnabled(true);
    			this.updateUI();
    		}
    		else
    			JOptionPane.showMessageDialog(sapo,"Protocolo não definido. Defina um protocolo!");
    	}
    	else sapo.jpMarcaPontosProtocol.mostraVista(sapo.paciente.dados.imgData[sapo.numImg].vista);
    }//GEN-LAST:event_jRdBtnPosteriorActionPerformed

    private void jRdBtnLatDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRdBtnLatDirActionPerformed
    	if (sapo.paciente.dados.imgData[sapo.numImg].vista.equalsIgnoreCase("Lateral Direita")) {
    		if(proto.latDir.size()!=0){    
    			int pto = 0;
    			jPanel4.removeAll();
    			int latDirX[] = proto.latDirX;
    			int latDirY[] = proto.latDirY;
    			for(int i=0; i<proto.latDir.size(); i++){
    				pto = ((Integer)proto.latDir.get(i)).intValue();
    				latDir[pto] = new javax.swing.JRadioButton();
    				jPanel4.add(latDir[pto]);
    				latDir[pto].setBounds(latDirX[pto], latDirY[pto], 20, 20);
    				latDir[pto].setContentAreaFilled(false);
    				latDir[pto].setEnabled(false);
    				latDir[pto].addFocusListener(new DeslocaParaVerComponente());
    				latDir[pto].addActionListener(new naoMuda());
    				jPanel4.setComponentZOrder(latDir[pto],0);
    			}
    			javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
    			jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/lado2.png")));
    			jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
    			jLabel1.setMaximumSize(new java.awt.Dimension(288, 650));
    			jLabel1.setMinimumSize(new java.awt.Dimension(288, 650));
    			jLabel1.setPreferredSize(new java.awt.Dimension(288, 650));
    			jPanel4.add(jLabel1);
    			jLabel1.setBounds(0, 0, 288, 650);
    			jPanel3.removeAll();
    			
    			for(int i=0; i<proto.latDir.size(); i++){
    				pto = ((Integer)proto.latDir.get(i)).intValue();
    				latDirCk[pto] = new javax.swing.JCheckBox(latDirLabel[pto]);
    				jPanel3.add(latDirCk[pto]);
    				latDirCk[pto].addFocusListener(new DeslocaParaVerComponente());
    				latDirCk[pto].addActionListener(new naoMuda());
    			}
    			latDirProtocol = 0;
    			pto = ((Integer)proto.latDir.get(latDirProtocol)).intValue();
    			latDir[pto].setEnabled(true);
    			latDir[pto].setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.red,1), javax.swing.BorderFactory.createLineBorder(java.awt.Color.yellow,2)));
    			latDir[pto].setBorderPainted(true);
    			jbtnReiniciar.setEnabled(true);
    			this.updateUI();
    		}
    		else
    			JOptionPane.showMessageDialog(sapo,"Protocolo não definido. Defina um protocolo!");
    	}
    	else sapo.jpMarcaPontosProtocol.mostraVista(sapo.paciente.dados.imgData[sapo.numImg].vista);
    }//GEN-LAST:event_jRdBtnLatDirActionPerformed

    private void jRdBtnLatEsqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRdBtnLatEsqActionPerformed
    	if (sapo.paciente.dados.imgData[sapo.numImg].vista.equalsIgnoreCase("Lateral Esquerda")) {
    		if(proto.latEsq.size()!=0){    
    			int pto = 0;
    			jPanel4.removeAll();
    			int latEsqX[] = proto.latEsqX;
    			int latEsqY[] = proto.latEsqY;
    			for(int i=0; i<proto.latEsq.size(); i++){
    				pto = ((Integer)proto.latEsq.get(i)).intValue();
    				latEsq[pto] = new javax.swing.JRadioButton();
    				jPanel4.add(latEsq[pto]);
    				latEsq[pto].setBounds(latEsqX[pto], latEsqY[pto], 20, 20);
    				latEsq[pto].setContentAreaFilled(false);
    				latEsq[pto].setEnabled(false);
    				latEsq[pto].addFocusListener(new DeslocaParaVerComponente());
    				latEsq[pto].addActionListener(new naoMuda());
    				jPanel4.setComponentZOrder(latEsq[pto],0);
    			}
    			javax.swing.JLabel jLabel1 = new javax.swing.JLabel(); 
    			jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/lado1.png")));
    			jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
    			jLabel1.setMaximumSize(new java.awt.Dimension(288, 650));
    			jLabel1.setMinimumSize(new java.awt.Dimension(288, 650));
    			jLabel1.setPreferredSize(new java.awt.Dimension(288, 650));
    			jPanel4.add(jLabel1);
    			jLabel1.setBounds(0, 0, 288, 650);
    			jPanel3.removeAll();
    			
    			for(int i=0; i<proto.latEsq.size(); i++){
    				pto = ((Integer)proto.latEsq.get(i)).intValue();
    				latEsqCk[pto] = new javax.swing.JCheckBox(latEsqLabel[pto]);
    				jPanel3.add(latEsqCk[pto]);
    				latEsqCk[pto].addFocusListener(new DeslocaParaVerComponente());
    				latEsqCk[pto].addActionListener(new naoMuda());
    			}
    			latEsqProtocol = 0;
    			pto = ((Integer)proto.latEsq.get(latEsqProtocol)).intValue();
    			latEsq[pto].setEnabled(true);  
    			latEsq[pto].setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.red,1), javax.swing.BorderFactory.createLineBorder(java.awt.Color.yellow,2)));
    			latEsq[pto].setBorderPainted(true);
    			jbtnReiniciar.setEnabled(true);
    			this.updateUI();
    		}
    		else
    			JOptionPane.showMessageDialog(sapo,"Protocolo não definido. Defina um protocolo!");
    	}
    	else sapo.jpMarcaPontosProtocol.mostraVista(sapo.paciente.dados.imgData[sapo.numImg].vista);
    }//GEN-LAST:event_jRdBtnLatEsqActionPerformed

    private void jRdBtnFrontalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRdBtnFrontalActionPerformed
    	if (sapo.paciente.dados.imgData[sapo.numImg].vista.equalsIgnoreCase("Anterior")) {
    		if(proto.frente.size()!=0){
    			int pto = 0;
    			jPanel4.removeAll();
    			int frenteX[] = proto.frenteX;
    			int frenteY[] = proto.frenteY;
    			for(int i=0; i<proto.frente.size(); i++){
    				pto = ((Integer)proto.frente.get(i)).intValue();
    				frente[pto] = new javax.swing.JRadioButton();
    				jPanel4.add(frente[pto]);
    				frente[pto].setBounds(frenteX[pto], frenteY[pto], 20, 20);
    				frente[pto].setContentAreaFilled(false);
    				frente[pto].setEnabled(false);
    				frente[pto].addFocusListener(new DeslocaParaVerComponente());
    				frente[pto].addActionListener(new naoMuda());
    				jPanel4.setComponentZOrder(frente[pto],0);
    			}
    			javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
    			jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/frente.png")));
    			jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
    			jLabel1.setMaximumSize(new java.awt.Dimension(288, 650));
    			jLabel1.setMinimumSize(new java.awt.Dimension(288, 650));
    			jLabel1.setPreferredSize(new java.awt.Dimension(288, 650));
    			jPanel4.add(jLabel1);
    			jLabel1.setBounds(0, 0, 288, 650);
    			
    			jPanel3.removeAll();
    			
    			for(int i=0; i<proto.frente.size(); i++){
    				pto = ((Integer)proto.frente.get(i)).intValue();
    				frenteCk[pto] = new javax.swing.JCheckBox(frenteLabel[pto]);
    				jPanel3.add(frenteCk[pto]);
    				frenteCk[pto].addFocusListener(new DeslocaParaVerComponente());
    				frenteCk[pto].addActionListener(new naoMuda());
    			}
    			
    			frenteProtocol = 0;
    			pto = ((Integer)proto.frente.get(frenteProtocol)).intValue();
    			frente[pto].setEnabled(true);
    			frente[pto].setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.red,1), javax.swing.BorderFactory.createLineBorder(java.awt.Color.yellow,2)));
    			frente[pto].setBorderPainted(true);
    			jbtnReiniciar.setEnabled(true);
    			this.updateUI();
    		}
    		else
    			JOptionPane.showMessageDialog(sapo,"Protocolo não definido. Defina um protocolo!");
    	}
    	else sapo.jpMarcaPontosProtocol.mostraVista(sapo.paciente.dados.imgData[sapo.numImg].vista);
    }//GEN-LAST:event_jRdBtnFrontalActionPerformed
    
    public void segueProtocol(boolean s){
    	boolean desacoplar = false;
        javax.swing.JCheckBox ck = new javax.swing.JCheckBox();
        javax.swing.JRadioButton rb1 = new javax.swing.JRadioButton();
        javax.swing.JRadioButton rb2 = new javax.swing.JRadioButton();
        if(s){
            if(jRdBtnFrontal.isSelected()){
                int tt = ((Integer)proto.frente.get(frenteProtocol)).intValue();
                ck = frenteCk[tt];
                rb1 = frente[tt];
                if(frenteProtocol<proto.frente.size()-1) frenteProtocol++;
                else desacoplar = true;
                tt = ((Integer)proto.frente.get(frenteProtocol)).intValue();
                rb2 = frente[tt];
            }
            if(jRdBtnLatEsq.isSelected()){
                int tt = ((Integer)proto.latEsq.get(latEsqProtocol)).intValue();
                ck = latEsqCk[tt];
                rb1 = latEsq[tt];
                if(latEsqProtocol<proto.latEsq.size()-1) latEsqProtocol++;
                else desacoplar = true;
                tt = ((Integer)proto.latEsq.get(latEsqProtocol)).intValue();
                rb2 = latEsq[tt];
            }
            if(jRdBtnLatDir.isSelected()){
                int tt = ((Integer)proto.latDir.get(latDirProtocol)).intValue();
                ck = latDirCk[tt];
                rb1 = latDir[tt];
                if(latDirProtocol<proto.latDir.size()-1) latDirProtocol++;
                else desacoplar = true;
                tt = ((Integer)proto.latDir.get(latDirProtocol)).intValue();
                rb2 = latDir[tt];
            }
            if(jRdBtnPosterior.isSelected()){
                int tt = ((Integer)proto.poster.get(posteriorProtocol)).intValue();
                ck = posteriorCk[tt];
                rb1 = posterior[tt];
                if(posteriorProtocol<proto.poster.size()-1) posteriorProtocol++;
                else desacoplar = true;
                tt = ((Integer)proto.poster.get(posteriorProtocol)).intValue();
                rb2 = posterior[tt];
            }
            
            ck.requestFocus();
            rb2.requestFocus();
            
            ck.setSelected(true);
            rb1.setSelected(true);
            rb1.setBorderPainted(false);
            rb2.setEnabled(true);
            rb2.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.red,1), javax.swing.BorderFactory.createLineBorder(java.awt.Color.yellow,2)));
			rb2.setBorderPainted(true);            
        }
        else{
            if(jRdBtnFrontal.isSelected()){
                int tt = ((Integer)proto.frente.get(frenteProtocol)).intValue();
                ck = frenteCk[tt];
                rb1 = frente[tt];
                if(frenteProtocol<proto.frente.size()-1) frenteProtocol++;
                else desacoplar = true;
                tt = ((Integer)proto.frente.get(frenteProtocol)).intValue();
                rb2 = frente[tt];
            }
            if(jRdBtnLatEsq.isSelected()){
                int tt = ((Integer)proto.latEsq.get(latEsqProtocol)).intValue();
                ck = latEsqCk[tt];
                rb1 = latEsq[tt];
                if(latEsqProtocol<proto.latEsq.size()-1) latEsqProtocol++;
                else desacoplar = true;
                tt = ((Integer)proto.latEsq.get(latEsqProtocol)).intValue();
                rb2 = latEsq[tt];
            }
            if(jRdBtnLatDir.isSelected()){
                int tt = ((Integer)proto.latDir.get(latDirProtocol)).intValue();
                ck = latDirCk[tt];
                rb1 = latDir[tt];
                if(latDirProtocol<proto.latDir.size()-1) latDirProtocol++;
                else desacoplar = true;
                tt = ((Integer)proto.latDir.get(latDirProtocol)).intValue();
                rb2 = latDir[tt];
            }
            if(jRdBtnPosterior.isSelected()){
                int tt = ((Integer)proto.poster.get(posteriorProtocol)).intValue();
                ck = posteriorCk[tt];
                rb1 = posterior[tt];
                if(posteriorProtocol<proto.poster.size()-1) posteriorProtocol++;
                else desacoplar = true;
                tt = ((Integer)proto.poster.get(posteriorProtocol)).intValue();
                rb2 = posterior[tt];
            }
            
            ck.requestFocus();
            rb2.requestFocus();
            
            ck.setEnabled(false);
            rb1.setEnabled(false);
            rb1.setBorderPainted(false);
            rb2.setEnabled(true);
            rb2.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.red,1), javax.swing.BorderFactory.createLineBorder(java.awt.Color.yellow,2)));
			rb2.setBorderPainted(true);
        }   
        if (desacoplar) {
            sapo.marcaPontosProtocol.desacoplarMantendo(sapo.numImg);
            if (sapo.user.dados.mostradicas) 
            	JOptionPane.showMessageDialog(sapo, 
                    "Marcação de pontos do protocolo completa.\n" +
                    "É possível agora proceder a análise.",
                    "Completo", JOptionPane.INFORMATION_MESSAGE);
            sapo.paciente.escreveDB();
            sapo.paciente.salvarAlteracoes = false;
        }
    } //segueProtocol

    
    public String getSelectedLabel(){
        int pto = 0;
        String nome = "";
        if((jRdBtnFrontal.isSelected())&&(frenteProtocol<proto.frente.size())){
            pto = ((Integer)proto.frente.get(frenteProtocol)).intValue();
            nome = frenteLabel[pto];
        }
        if((jRdBtnLatEsq.isSelected())&&(latEsqProtocol<proto.latEsq.size())){
            pto = ((Integer)proto.latEsq.get(latEsqProtocol)).intValue();
            nome = latEsqLabel[pto];
        }
        if((jRdBtnLatDir.isSelected())&&(latDirProtocol<proto.latDir.size())){
            pto = ((Integer)proto.latDir.get(latDirProtocol)).intValue();
            nome = latDirLabel[pto];
        }
        if((jRdBtnPosterior.isSelected())&&(posteriorProtocol<proto.poster.size())){
            pto = ((Integer)proto.poster.get(posteriorProtocol)).intValue();
            nome = posteriorLabel[pto];
        }
        return nome; 
    }
    
    class naoMuda implements java.awt.event.ActionListener {
		public void actionPerformed(ActionEvent e) {
			Object obj = e.getSource();
			if (obj instanceof javax.swing.JToggleButton) {
				javax.swing.JToggleButton tgb = 
					(javax.swing.JToggleButton)obj;
				tgb.setSelected(!tgb.isSelected());
			}
			
		}
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGroupPontos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JRadioButton jRdBtnFrontal;
    private javax.swing.JRadioButton jRdBtnLatDir;
    private javax.swing.JRadioButton jRdBtnLatEsq;
    private javax.swing.JRadioButton jRdBtnPosterior;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jbMedeDistAjuda;
    private javax.swing.JButton jbtnCancel;
    private javax.swing.JButton jbtnOk;
    private javax.swing.JButton jbtnReiniciar;
    private javax.swing.JComboBox jcmbProtocol;
    public javax.swing.JMenuItem jmItemApagar;
    public javax.swing.JMenuItem jmItemPular;
    private javax.swing.JMenuItem jmItemReiniciar;
    private javax.swing.JMenuItem jmItemSair;
    private javax.swing.JMenuItem jmenuItem100;
    private javax.swing.JMenuItem jmenuItem150;
    private javax.swing.JMenuItem jmenuItem80;
    private javax.swing.JMenuItem jmenuItemOtimo;
    private javax.swing.JMenuItem jmtemZoom200;
    public javax.swing.JPopupMenu jpopupMenuProtocol;
    // End of variables declaration//GEN-END:variables
    
}
